import { LightningElement, wire, track } from 'lwc';
import getContacts from '@salesforce/apex/editButtonCtrl.getContacts';
import { updateRecord } from 'lightning/uiRecordApi';
import { ShowToastEvent } from 'lightning/platformShowToastEvent';
import { refreshApex } from '@salesforce/apex';
// datatable columns
const columns = [
    {
        label: 'Project Name',
        fieldName: 'Project_Name__c'
    }, {
        label: 'Status',
        fieldName: 'Status__c',
        type: 'picklist',
        editable: true
    }, {
        label: 'Project Type',
        fieldName: 'Project_Type__c',
        type: 'picklist',
        editable: true
    }, {
        label: 'Priority',
        fieldName: 'Priority__c',
        type: 'picklist',
        editable: true
    }
];

export default class InlineEditTable extends LightningElement {

    columns = columns;
    @track projects;
    saveDraftValues = [];

    @wire(getContacts)
    cons(result) {
        this.projects = result;
        if (result.error) {
            this.projects = undefined;
        }
    };

    handleSave(event) {
        this.saveDraftValues = event.detail.draftValues;
        const recordInputs = this.saveDraftValues.slice().map(draft => {
            const fields = Object.assign({}, draft);
            return { fields };
        });

        // Updateing the records using the UiRecordAPi
        const promises = recordInputs.map(recordInput => updateRecord(recordInput));
        Promise.all(promises).then(res => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Success',
                    message: 'Records Updated Successfully!!',
                    variant: 'success'
                })
            );
            this.saveDraftValues = [];
            return this.refresh();
        }).catch(error => {
            this.dispatchEvent(
                new ShowToastEvent({
                    title: 'Error',
                    message: 'An Error Occured!!',
                    variant: 'error'
                })
            );
        }).finally(() => {
            this.saveDraftValues = [];
        });
    }

    // This function is used to refresh the table once data updated
    async refresh() {
        await refreshApex(this.projects);
    }
}